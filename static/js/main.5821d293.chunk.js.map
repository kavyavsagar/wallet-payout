{"version":3,"sources":["actions/constants.js","services/UserServices.js","actions/UserActions.js","components/UserForm.js","services/TransferServices.js","actions/TransferActions.js","components/TransferForm.js","services/PaymentServices.js","actions/PaymentActions.js","components/PaymentForm.js","containers/Payout.js","reducers/UserReducers.js","reducers/TransferReducers.js","reducers/PaymentReducers.js","reducers/index.js","serviceWorker.js","index.js"],"names":["userConstants","transferConstants","paymentConstants","userService","api","args","fetch","then","response","json","catch","error","userSubmitSuccess","userId","type","payload","userSubmitStarted","userSubmitFailure","userGetSuccess","param","userGetStarted","userGetFailure","userActions","user","dispatch","localStorage","getItem","userid","options","method","headers","body","JSON","stringify","data","setItem","url","firstname","first_name","lastname","last_name","email","country","console","log","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","required","value","undefined","test","renderField","input","label","autoComplete","meta","touched","TextField","fullWidth","className","regions","ColorCircularProgress","withStyles","root","color","CircularProgress","createUser","values","ua","initForm","reduxForm","form","enableReinitialize","props","handleSubmit","loading","pristine","reset","submitting","submitSucceeded","onSubmit","isUser","showerror","classes","id","useParams","React","useEffect","requestUser","Fragment","Typography","variant","gutterBottom","noValidate","Grid","container","item","xs","sm","Field","name","component","validate","Object","entries","key","push","MenuItem","FormControl","InputLabel","Select","labelId","renderStateSelect","Button","size","thickness","connect","state","userFormReducer","initialValues","userGetReducer","transferService","transferPostSuccess","transferPostStarted","transferPostFailure","transferActions","trans","userToken","acctype","transferMethod","ta","transForm","transfer_country","currency","transfertype","isTransfer","md","transferFormReducer","paymentService","paymentPostSuccess","paymentPostStarted","paymentPostFailure","paymentActions","pay","removeItem","apurpose","paymentMethod","pa","payForm","isPayment","paymentFormReducer","Copyright","align","Link","href","Date","getFullYear","appBar","position","layout","width","marginLeft","marginRight","breakpoints","up","paper","marginBottom","padding","stepper","buttons","display","justifyContent","button","submit","toolbar","mixins","content","flexGrow","steps","initialState","userdata","initialUserState","transdata","paydata","rootReducer","combineReducers","formReducer","action","assign","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","rootStore","exact","path","useState","activeStep","setActiveStep","handleNext","CssBaseline","AppBar","Toolbar","noWrap","Paper","Stepper","map","Step","StepLabel","length","paragraph","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5821d293.chunk.js","sourcesContent":["export const userConstants = {\n  \tUSER_CREATE_REQUEST: 'USERS_SUBMIT_REQUEST',\n    USER_CREATE_SUCCESS: 'USERS_SUBMIT_SUCCESS',\n    USER_CREATE_FAILURE: 'USERS_SUBMIT_FAILURE',\n    USER_GET_REQUEST: 'USERS_FETCH_REQUEST',\n    USER_GET_SUCCESS: 'USERS_FETCH_SUCCESS',\n    USER_GET_FAILURE: 'USERS_FETCH_FAILURE'\n}\n\nexport const transferConstants = {\n  \tTRANSFER_REQUEST: 'TRANSFER_METHOD_REQUEST',\n    TRANSFER_SUCCESS: 'TRANSFER_METHOD_SUCCESS',\n   \tTRANSFER_FAILURE: 'TRANSFER_METHOD_FAILURE'\n}\n\nexport const paymentConstants = {\n  \tPAYMENT_REQUEST: 'PAYMENT_SUBMIT_REQUEST',\n    PAYMENT_SUCCESS: 'PAYMENT_SUBMIT_SUCCESS',\n   \tPAYMENT_FAILURE: 'PAYMENT_SUBMIT_FAILURE'\n}","const postData = (api, args) =>\n    fetch(api, args)\n        .then(response =>\n            response.json()           \n        ).catch(error => {\n        \t//console.log('userservice', error)\n            return error;\n        }); \n\nconst getData = (api) =>\n    fetch(api)\n        .then(response =>\n            response.json()           \n        ).catch(error => {\n        \t//console.log('userservice', error)\n            return error;\n        });         \n\nexport const userService = {\n    postData,\n    getData\n};      ","//import { SubmissionError } from 'redux-form';\nimport { userConstants } from './constants';\nimport { userService } from '../services/UserServices';\n\nconst submitUser = user => (dispatch) => {\n\t//window.alert(`You submitted2:\\n\\n${JSON.stringify(user, null, 2)}`);\n\t//console.log( JSON.stringify(user, null, 2));\n    \n    if(!localStorage.getItem('userId')){\n        dispatch(userSubmitFailure(\"User id missing\"));\n    }\n\n    user.userid =  localStorage.getItem('userId')\n    let options = {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        headers: { \n                'Content-Type':'application/x-www-form-urlencoded',\n                'Access-Control-Allow-Origin': '*'\n               },\n        body: JSON.stringify(user)         \n    };\n    let url = 'http://18.190.107.131/api/payout/create_user'\n\n    dispatch(userSubmitStarted());\n    \n    return userService.postData(url, options)\n        .then(response => {\n           // console.log(\"SUCCESS\", response)\n            if(response.data){\n              localStorage.setItem('userToken', response.data);\n              dispatch(userSubmitSuccess(response.data))\n            }\n            // else{\n            //   dispatch(userSubmitFailure(error));\n            // }\n        }).catch(error => {\n            //console.log(\"ERROR\", error)\n            dispatch(userSubmitFailure(error));\n            //throw (error);\n        }); \n};\n\nconst userSubmitSuccess = userId => {\n   // console.log(\"Success\");\n    return {\n      type: userConstants.USER_CREATE_SUCCESS,\n      payload: {\n          userId\n      }\n\n}};\n\nconst userSubmitStarted = () => {\n  //  console.log(\"Request\");\n  return {type: userConstants.USER_CREATE_REQUEST}\n};\n\nconst userSubmitFailure = error => {\n   // console.log(\"Failed\");\n    return  {\n      type: userConstants.USER_CREATE_FAILURE,\n      payload: {\n        error\n    }\n  }\n};\n\n/************************************************/\n\nconst fetchUser = userid => (dispatch) => {\n  //window.alert(`You submitted2:\\n\\n${JSON.stringify(user, null, 2)}`);\n  //console.log( userid);\n\n  let url = `http://18.190.107.131/api/payout/user/${userid}`\n \n  dispatch(userGetStarted());\n    \n  return userService.getData(url)\n      .then(response => {\n          //console.log(\"SUCCESS\", response)\n          if(response.data){\n            localStorage.setItem('userId', userid);\n\n            let param = {\n                        firstname: response.data.first_name, \n                        lastname: response.data.last_name,\n                        email: response.data.email, \n                        country: \"US\"\n                      };\n\n            dispatch(userGetSuccess(param))\n          }\n          // else{\n          //   dispatch(userGetFailure(error));\n          // }\n      }).catch(error => {\n          console.log(\"ERROR\", error)\n          dispatch(userGetFailure(error));\n          //throw (error);\n      });  \n};\n\nconst userGetSuccess = param => {\n    //console.log(\"Success\");\n    return {\n      type: userConstants.USER_GET_SUCCESS,\n      payload: param\n\n}};\nconst userGetStarted = () => {\n    //console.log(\"Request\");\n    return {type: userConstants.USER_GET_REQUEST}\n};\n\nconst userGetFailure = error => {\n    //console.log(\"Failed\");\n    return  {\n      type: userConstants.USER_GET_FAILURE,\n      payload: {\n        error\n    }\n  }\n};\n\n/************************************/\n\nexport const userActions = {\n    submitUser,\n    fetchUser\n};","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport {userActions as ua} from '../actions/UserActions';\nimport { connect } from 'react-redux'\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useParams} from \"react-router\";\n\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n// Styles\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: '100%',\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst required = value => value ? undefined : 'Required'\nconst email = value => value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address' : undefined\n// Form fields\nconst renderField = ({ input, type, label, autoComplete, meta: { touched, error} }) => {\n\n  return(\n    <div>\n     <TextField\n      required\n      {...input} \n      type={type}\n      label={label}\n      fullWidth\n      autoComplete={autoComplete} \n      />\n      {touched && (error && <span className=\"alert-danger\">{error}</span>) }\n    </div>    \n)}\n\nconst regions = {\n          \"AL\"  : \"Albama\",\n          \"CA\"  : \"California\",\n          \"NY\"  : \"New York\",\n          \"OH\"  : \"Oho\"\n          };\n\n   \n/********************************************************************/  \n\nconst ColorCircularProgress = withStyles({\n  root: {\n    color: '#4058b5',\n  },\n})(CircularProgress);\n\nconst createUser = (values, dispatch) => {\n  return dispatch(ua.submitUser(values));\n}\n\n\nconst UserForm = props => {\n  const { handleSubmit, pristine, reset, submitting, \n    loading, submitSucceeded, onSubmit, isUser, showerror } = props;\n\n  if(submitSucceeded !== false && isUser !== false){ onSubmit()}\n\n  const classes = useStyles();\n\n  const renderStateSelect = ({ input, meta: { touched, error } }) =>{\n\n    let options = [];\n    for (let [key, value] of Object.entries(regions)) {\n      options.push(<MenuItem value={key} key={key}>{value}</MenuItem>)\n    }\n\n    return(\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"region-select-label\">State/Province/Regions</InputLabel>\n        <Select\n          labelId=\"region-select-label\"\n          id=\"region-select\"\n          {...input}         \n          required\n        >     \n          {options}\n        </Select>\n      </FormControl> \n      {touched && error && <span className=\"alert-danger\">{error}</span>}\n    </div>\n  )}; \n\n  let { id } = useParams();\n  \n  React.useEffect(props => { \n    props.requestUser(id)\n     \n  }, [id]);\n\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Create User\n      </Typography>      \n      <form onSubmit={handleSubmit(createUser)} noValidate>\n      <Grid container spacing={3}>      \n        <Grid item xs={12} sm={6}>\n          <Field\n            name=\"firstname\"           \n            type=\"text\"\n            component={renderField}\n            label=\"First Name\" \n            validate={required}\n            autoComplete=\"fname\"\n          /> \n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Field\n            name=\"lastname\"           \n            type=\"text\"\n            component={renderField}\n            label=\"Last Name\" \n            validate={required}\n            autoComplete=\"lname\"\n          /> \n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Field\n            name=\"email\"           \n            type=\"email\"\n            component={renderField}\n            label=\"Email Address\" \n            validate={[required, email]}\n            autoComplete=\"email\"\n          /> \n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Field\n            name=\"dob\"           \n            type=\"date\"\n            component={renderField}\n            label=\"\" \n            validate={required}\n            autoComplete=\"dob\"\n          /> \n        </Grid>\n        <Grid item xs={12}>          \n          <Field            \n            name=\"address\"\n            label=\"Address line\"\n            component={renderField}\n            validate={required}\n            autoComplete=\"address-line\"\n          /> \n        </Grid>\n        <Grid item xs={12} sm={6}>        \n          <Field            \n            name=\"city\"\n            label=\"City\"\n            type=\"text\"\n            component={renderField}\n            validate={required}\n            autoComplete=\"city\"\n          /> \n        </Grid>\n        <Grid item xs={12} sm={6}>                    \n          <Field name=\"state\" validate={required} component={renderStateSelect(useStyles)} />\n        </Grid>\n        <Grid item xs={12} sm={6}>    \n          <Field            \n            type=\"number\"\n            name=\"postalcode\"\n            label=\"Zip / Postal code\"\n            component={renderField}\n            validate={required}\n            autoComplete=\"postal-code\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>        \n          <Field            \n            type=\"text\"\n            name=\"country\"\n            label=\"Country\"\n            component={renderField}  \n            validate={required}       \n            autoComplete=\"country\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\">\n            Submit & Continue\n          </Button> \n                  \n        </Grid> \n        <Grid item xs={12} sm={6}> \n          {loading? <ColorCircularProgress size={30} thickness={5} />: ''}          \n          { (submitSucceeded && !isUser)?<span className=\"alert-danger\">Create user failed!</span>: ''}                     \n        </Grid> \n      </Grid>\n      </form>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => { \n  return {   \n    loading: state.userFormReducer.loading,\n    showerror: state.userFormReducer.showerror,\n    isUser: state.userFormReducer.isUser,\n    initialValues: state.userGetReducer.data\n  } \n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    requestUser: (userid) => dispatch(ua.fetchUser(userid))\n  }\n}\n\nconst initForm =  reduxForm({\n  form: 'userform', // a unique identifier for this form\n  createUser,\n  enableReinitialize: true\n})(UserForm);\n\n// You have to connect() to any reducers that you wish to connect to yourself\nexport default connect(mapStateToProps,mapDispatchToProps)(initForm)","const transferData = (api, args) =>\n    fetch(api, args)\n        .then(response =>\n            response.json()\n        ).catch(error => {\n            return error;\n        }); \n\nexport const transferService = {\n    transferData\n};      ","//import { SubmissionError } from 'redux-form';\nimport { transferConstants } from './constants';\nimport { transferService } from '../services/TransferServices';\n\nconst submitTransfer = trans => (dispatch) => {\n\t//window.alert(`You submitted2:\\n\\n${JSON.stringify(trans, null, 2)}`);\n\t//console.log( JSON.stringify(trans, null, 2));\n\n    if(!localStorage.getItem('userToken')){\n        dispatch(transferPostFailure(\"User token missing\"));\n    }\n    \n    trans.userToken = localStorage.getItem('userToken');\n    let options = {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        headers: { \n                'Content-Type':'application/x-www-form-urlencoded',\n                'Access-Control-Allow-Origin': '*'\n               },\n        body: JSON.stringify(trans)         \n    };\n\n    let url = 'http://18.190.107.131/api/payout/transfer_method'\n\n    dispatch(transferPostStarted());\n    \n    return transferService.transferData(url, options)\n        .then(response => {\n           // console.log(\"TSUCCESS\", response)            \n            if(response.data){\n              dispatch(transferPostSuccess(response.data))\n            }\n            // else{\n            //   dispatch(transferPostFailure(error));\n            // }\n        }).catch(error => {\n            //console.log(\"TERROR\", error)\n            dispatch(transferPostFailure(error));\n            //throw (error);\n        }); \n};\n\nconst transferPostSuccess = userId => {\n    //console.log(\"TSuccess\");\n    return {\n      type: transferConstants.TRANSFER_SUCCESS,\n      payload: {\n          userId\n      }\n\n}};\n\nconst transferPostStarted = () => {\n    //console.log(\"TRequest\");\n  return {type: transferConstants.TRANSFER_REQUEST}\n};\n\nconst transferPostFailure = error => {\n    //console.log(\"TFailed\");\n    return  {\n      type: transferConstants.TRANSFER_FAILURE,\n      payload: {\n        error\n    }\n  }\n};\n\n\nexport const transferActions = {\n    submitTransfer\n};","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport { transferActions as ta} from '../actions/TransferActions';\nimport { connect } from 'react-redux'\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n// Styles\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: '100%',\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst required = value => value ? undefined : 'Required'\n// Form fields\nconst renderField = ({ input, type, label, autoComplete, meta: { touched, error} }) => {\n\n  return(\n    <div>\n     <TextField\n      required\n      {...input} \n      type={type}\n      label={label}\n      fullWidth\n      autoComplete={autoComplete} \n      />\n      {touched && (error && <span className=\"alert-danger\">{error}</span>) }\n    </div>    \n)}\nconst acctype = {\"CHECKING\" : \"Checking\",\n                 \"SAVINGS\" : \"Savings\"};\n\n\n/*********************************************************************/  \nconst ColorCircularProgress = withStyles({\n  root: {\n    color: '#4058b5',\n  },\n})(CircularProgress);\n\nconst transferMethod = (values, dispatch) => {\n  return dispatch(ta.submitTransfer(values));\n}\n\nconst TransferForm = props => {\n\n  const {error, handleSubmit, pristine, reset, loading, \n    submitting, submitSucceeded,isTransfer, onSubmit} = props;\n \n  if(isTransfer !== false && submitSucceeded !== false){\n      onSubmit()\n  }\n\n  const classes = useStyles();\n\nconst renderAccountSelect = ({ input, meta: { touched, error } }) => {\n  \n  let options = [];\n  for (let [key, value] of Object.entries(acctype)) {\n    options.push(<MenuItem value={key} key={key}>{value}</MenuItem>)\n  }\n\n  return (<div>\n    <FormControl className={classes.formControl}>\n      <InputLabel id=\"account-type-select-label\">Account Type</InputLabel>\n      <Select\n        labelId=\"account-type-select-label\"\n        id=\"account-select\"\n        {...input}         \n        required\n      >     \n        {options}\n      </Select>\n    </FormControl>  \n\n    {touched && error && <span className=\"alert-danger\">{error}</span>}\n  </div>)\n};\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Transfer Method\n      </Typography>\n      <form onSubmit={handleSubmit(transferMethod)} noValidate>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Field\n            name=\"transfer_country\"           \n            type=\"text\"\n            component={renderField}\n            label=\"Transfer Country\" \n            validate={required}\n            autoComplete=\"transfer-country\"\n          />  \n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Field\n            name=\"currency\"           \n            type=\"text\"\n            component={renderField}\n            label=\"Currency\" \n            validate={required}\n            autoComplete=\"currency\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Field\n            name=\"transfertype\"           \n            type=\"text\"\n            component={renderField}\n            label=\"Transfer Type\" \n            validate={required}\n            autoComplete=\"transfertype\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>         \n          <Field\n            name=\"branchId\"           \n            type=\"number\"\n            component={renderField}\n            label=\"Routing Number\" \n            validate={required}\n            autoComplete=\"branchId\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Field\n            name=\"bankAccountId\"           \n            type=\"number\"\n            component={renderField}\n            label=\"Account Number\" \n            validate={required}\n            autoComplete=\"bankAccountId\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>        \n          <Field name=\"bankAccountPurpose\" validate={required} component={renderAccountSelect} />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\">\n            Submit & Continue\n          </Button>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          {loading? <ColorCircularProgress size={30} thickness={5} />: ''} \n          { (submitSucceeded && !isTransfer)?<span className=\"alert-danger\">Transfer Method failed!</span>: ''}\n        </Grid> \n      </Grid>\n      </form>\n    </React.Fragment>\n  );\n}\n\n\nconst mapStateToProps = (state) => {\n  return {   \n    loading: state.transferFormReducer.loading,\n    isTransfer: state.transferFormReducer.isTransfer\n  } \n}\n\nconst transForm =  reduxForm({\n  form: 'transferform', // a unique identifier for this form\n  transferMethod,\n  initialValues:{transfer_country: \"US\", currency: \"USD\", transfertype: \"BANK_ACCOUNT\"  },\n  // destroyOnUnmount: false, // <------ preserve form data\n  // forceUnregisterOnUnmount: true, // <------ unregister fields on unmount\n})(TransferForm);\n\n// You have to connect() to any reducers that you wish to connect to yourself\nexport default connect(mapStateToProps)(transForm);","const paymentData = (api, args) =>\n    fetch(api, args)\n        .then(response =>\n            response.json()\n        ).catch(error => {\n            return error;\n        }); \n\nexport const paymentService = {\n    paymentData\n};      ","// import { SubmissionError } from 'redux-form';\nimport { paymentConstants } from './constants';\nimport { paymentService } from '../services/PaymentServices';\n\nconst submitPayment = pay => (dispatch) => {\n\t//window.alert(`You submitted2:\\n\\n${JSON.stringify(pay, null, 2)}`);\n\t//console.log( JSON.stringify(pay, null, 2));\n\n    if(!localStorage.getItem('userToken')){\n        dispatch(paymentPostFailure(\"User token missing\"));\n    }\n    \n    pay.userToken = localStorage.getItem('userToken');\n    let options = {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        headers: { \n                'Content-Type':'application/x-www-form-urlencoded',\n                'Access-Control-Allow-Origin': '*'\n               },\n        body: JSON.stringify(pay)         \n    };\n    let url = 'http://18.190.107.131/api/payout/payment_transfer'\n\n    dispatch(paymentPostStarted());\n    \n    return paymentService.paymentData(url, options)\n        .then(response => {\n            //console.log(\"PSUCCESS\", response)            \n            if(response.data){\n              localStorage.removeItem('userToken');\n              dispatch(paymentPostSuccess(response.data))\n            }\n            // else{\n            //   dispatch(paymentPostFailure(error));\n            // }\n        }).catch(error => {\n           // console.log(\"PERROR\", error)\n            dispatch(paymentPostFailure(error));\n            //throw (error);\n        }); \n};\n\nconst paymentPostSuccess = userId => {\n   // console.log(\"PSuccess\");\n    return {\n      type: paymentConstants.PAYMENT_SUCCESS,\n      payload: {\n          userId\n      }\n\n}};\n\nconst paymentPostStarted = () => {\n  //  console.log(\"PRequest\");\n  return {type: paymentConstants.PAYMENT_REQUEST}\n};\n\nconst paymentPostFailure = error => {\n    //console.log(\"PFailed\");\n    return  {\n      type: paymentConstants.PAYMENT_FAILURE,\n      payload: {\n        error\n    }\n  }\n};\n\n\nexport const paymentActions = {\n    submitPayment\n};","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport { paymentActions as pa} from '../actions/PaymentActions';\nimport { connect } from 'react-redux'\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\n// Styles\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: '100%',\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst required = value => value ? undefined : 'Required'\n// Form fields\nconst renderField = ({ input, type, label, autoComplete, meta: { touched, error} }) => {\n\n  return(\n    <div>\n     <TextField\n      required\n      {...input} \n      type={type}\n      label={label}\n      fullWidth\n      autoComplete={autoComplete} \n      />\n      {touched && (error && <span className=\"alert-danger\">{error}</span>) }\n    </div>    \n)}\nconst apurpose = {\"GP0001\" : \"Bonus\",\n                 \"GP0002\" : \"Commission\",\n                 \"GP0003\" : \"Expense\",\n                 \"GP0004\" : \"Non-Taxable Payment\",\n                 \"GP0005\" : \"Income\",\n                 \"GP0006\" : \"Pension\",\n                 \"GP0007\" : \"Charity Donation\"\n               };\n\n/********************************************************************************/\n\nconst ColorCircularProgress = withStyles({\n  root: {\n    color: '#4058b5',\n  },\n})(CircularProgress);\n\nconst paymentMethod = (values, dispatch) => {\n  return dispatch(pa.submitPayment(values));\n}\n\nconst PaymentForm = props => {\n\n  const {error, handleSubmit, pristine, reset, submitting, \n    submitSucceeded, onSubmit, isPayment, loading} = props;\n\n  if(isPayment !== false && submitSucceeded !== false){\n     onSubmit()\n  }\n\n const classes = useStyles();\nconst renderPurposeSelect = ({ input, meta: { touched, error } }) => {\n \n  let options = [];\n\n  for (let [key, value] of Object.entries(apurpose)) {\n    options.push(<MenuItem value={key} key={key}>{value}</MenuItem>)\n  }\n\n  return (<div>\n    <FormControl className={classes.formControl}>\n      <InputLabel id=\"purpose-type-select-label\">Purpose</InputLabel>\n      <Select\n        labelId=\"purpose-type-select-label\"\n        id=\"purpose-select\"\n        {...input}         \n        required\n      >     \n        {options}\n      </Select>\n    </FormControl>  \n\n    {touched && error && <span className=\"alert-danger\">{error}</span>}\n  </div>)\n};\n\n\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Make Payment\n      </Typography>\n      <form onSubmit={handleSubmit(paymentMethod)} noValidate>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Field\n            name=\"currency\"           \n            type=\"text\"\n            component={renderField}\n            label=\"Currency\" \n            validate={required}\n            autoComplete=\"currency\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Field\n            name=\"paymentid\"           \n            type=\"text\"\n            component={renderField}\n            label=\"Client PaymentId\" \n            validate={required}\n            autoComplete=\"paymentid\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>         \n          <Field\n            name=\"amount\"           \n            type=\"text\"\n            component={renderField}\n            label=\"Amount\" \n            validate={required}\n            autoComplete=\"amount\"\n          />\n        </Grid>  \n        <Grid item xs={12} md={6}>        \n          <Field name=\"purpose\" validate={required} component={renderPurposeSelect} />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Button \n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\">\n            Finish Payout\n          </Button>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          {loading? <ColorCircularProgress size={30} thickness={5} />: ''} \n          { (submitSucceeded && !isPayment)?<span className=\"alert-danger\">Payment failed!</span>: ''}\n        </Grid>\n      </Grid>\n      </form>\n    </React.Fragment>\n  );\n}\n\n\nconst mapStateToProps = (state) => {\n  return {   \n    loading: state.paymentFormReducer.loading,\n    isPayment: state.paymentFormReducer.isPayment\n  } \n}\n\nconst payForm =  reduxForm({\n  form: 'paymentform', // a unique identifier for this form\n  paymentMethod,\n  initialValues:{currency: \"USD\" },\n\n})(PaymentForm);\n\n// You have to connect() to any reducers that you wish to connect to yourself\nexport default connect(mapStateToProps)(payForm);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport UserForm from '../components/UserForm';\nimport TransferForm from '../components/TransferForm';\nimport PaymentForm from '../components/PaymentForm';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">      \n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"http://inkloft.com/\">\n        Inkloft\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative',\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}));\n\nconst steps = ['Create User', 'Transfer Method', 'Make Payment'];\n\n// function getStepContent(step) {\n//   // {getStepContent(activeStep)}\n//   switch (step) {\n//     case 0:\n//       return <UserForm/>;\n//     case 1:\n//       return <TransferForm />;\n//     case 2:\n//       return <PaymentForm />;\n//     default:\n//       throw new Error('Unknown step');\n//   }\n// }\n\n\nexport default function Payout() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const handleNext = () => { \n    setActiveStep(activeStep + 1);\n  };\n\n\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"absolute\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h5\" color=\"inherit\" noWrap>\n            INKLOFT\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            Payout\n          </Typography>\n          <Stepper activeStep={activeStep} className={classes.stepper}>\n            {steps.map(label => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          <React.Fragment>\n            {activeStep === steps.length ? (\n              <React.Fragment>\n                <Typography variant=\"h5\" gutterBottom>\n                  Thank you, payment successfully completed!\n                </Typography>\n                <Typography variant=\"subtitle1\">\n                  Your order number is #2001539. We have emailed your order confirmation, and will send you an update when your order has shipped.\n                </Typography>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n               \n                {activeStep === 0 && (<UserForm onSubmit={handleNext}/>)}\n                {activeStep === 1 && (<TransferForm onSubmit={handleNext}/>)}\n                {activeStep === 2 && (<PaymentForm onSubmit={handleNext}/>)}   \n\n                <div className={classes.content}>                \n                    <Typography paragraph align=\"center\" color=\"textSecondary\">\n                      ** Please donot refresh the page **\n                    </Typography>              \n                </div>\n                       \n              </React.Fragment>\n            )}\n          </React.Fragment>\n        </Paper>\n        <Copyright />\n      </main>\n    </React.Fragment>\n  );\n}","import { userConstants } from '../actions/constants';\n\nconst initialState = {\n  loading: false,\n  userdata: {},\n  showerror: null,\n  isUser: false\n};\n\nexport const userFormReducer = (state = initialState, action)=>  {\n\n  switch (action.type) {\n      case userConstants.USER_CREATE_REQUEST:        \n          return Object.assign(\n            {}, state, \n            {\n              loading: true\n            })\n\n      case userConstants.USER_CREATE_SUCCESS:\n          return Object.assign(\n            {}, state, \n            {\n              loading: false,\n              showerror: (!action.payload)? \"Create User Failed !\":null,\n              userdata: action.payload,\n              isUser: (action.payload)?true: false\n            })\n       \n      case userConstants.USER_CREATE_FAILURE:          \n          return Object.assign(\n            {}, state, \n            {\n              loading: false,\n              showerror: (!action.payload.error)? \"Create User Failed !\":action.payload.error\n            })\n      default:\n          return state\n  }\n}\n\nconst initialUserState = {\n  loading: false,\n  data: {}\n};\n\nexport const userGetReducer = (state = initialUserState, action)=>  {\n\n  switch (action.type) {\n      case userConstants.USER_GET_REQUEST:        \n          return Object.assign(\n            {}, state, \n            {\n              loading: true\n            })\n\n      case userConstants.USER_GET_SUCCESS:\n          return Object.assign(\n            {}, state, \n            {\n              loading: false,\n              data: action.payload\n            })\n       \n      case userConstants.USER_GET_FAILURE:          \n          return Object.assign(\n            {}, state, \n            {\n              loading: false\n            })\n      default:\n          return state\n  }\n}","import { transferConstants } from '../actions/constants';\n\nconst initialState = {\n  loading: false,\n  transdata: {},\n  error: null,\n  isTransfer: false\n};\n\nexport const transferFormReducer = (state = initialState, action)=>  {\n\n  switch (action.type) {\n      case transferConstants.TRANSFER_REQUEST:        \n          return Object.assign(\n            {}, state, \n            {\n              loading: true\n            })\n\n      case transferConstants.TRANSFER_SUCCESS:\n          return Object.assign(\n            {}, state, \n            {\n              loading: false,\n              error: null,\n              transdata: action.payload,\n              isTransfer: (action.payload)?true: false\n            })\n       \n      case transferConstants.TRANSFER_FAILURE:          \n          return Object.assign(\n            {}, state, \n            {\n              loading: false,\n              error: action.payload\n            })\n      default:\n          return state\n  }\n}","import { paymentConstants } from '../actions/constants';\n\nconst initialState = {\n  loading: false,\n  paydata: {},\n  error: null,\n  isPayment: false\n};\n\nexport const paymentFormReducer = (state = initialState, action)=>  {\n\n  switch (action.type) {\n      case paymentConstants.PAYMENT_REQUEST:        \n          return Object.assign(\n            {}, state, \n            {\n              loading: true\n            })\n\n      case paymentConstants.PAYMENT_SUCCESS:\n          return Object.assign(\n            {}, state, \n            {\n              loading: false,\n              error: null,\n              paydata: action.payload,\n              isPayment: (action.payload)?true: false\n            })\n       \n      case paymentConstants.PAYMENT_FAILURE:          \n          return Object.assign(\n            {}, state, \n            {\n              loading: false,\n              error: action.payload\n            })\n      default:\n          return state\n  }\n}","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\nimport {userFormReducer, userGetReducer} from './UserReducers'\nimport {transferFormReducer} from './TransferReducers'\nimport {paymentFormReducer} from './PaymentReducers'\n\nconst rootReducer = combineReducers({\n  // ...your other reducers here\n  // you have to pass formReducer under 'form' key,\n  // for custom keys look up the docs for 'getFormState'  \n  form: formReducer,\n  userFormReducer,\n  userGetReducer,\n  transferFormReducer,\n  paymentFormReducer\n})\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport Payout from './containers/Payout';\nimport rootStore from './reducers/index';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router, Switch} from 'react-router-dom';\n\nReactDOM.render(\n\t<Provider store={rootStore}>\n\t  <Router>\n\t\t<Switch>\n\t\t  <Route exact path=\"/:id\" component={Payout} />\n\t\t</Switch>\n\t  </Router>\t\t\n\t</Provider>, \n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}